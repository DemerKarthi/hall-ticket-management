import React, { useState, useEffect } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import {
  Container,
  Paper,
  Typography,
  Box,
  Button,
  Grid,
  IconButton,
  Drawer,
  List,
  ListItem,
  ListItemIcon,
  ListItemText,
  Divider,
  useTheme,
  useMediaQuery,
  Card,
  CardContent,
  CardActions,
  Pagination,
  Chip,
  InputAdornment,
  Alert,
  Snackbar,
  Avatar,
  Stack,
  Tooltip,
  TextField,
  Collapse,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  AppBar,
  Toolbar,
} from '@mui/material';
import { 
  Logout as LogoutIcon,
  School as SchoolIcon,
  Search as SearchIcon,
  Download as DownloadIcon,
  Person as PersonIcon,
  Email as EmailIcon,
  Class as ClassIcon,
  Assignment as AssignmentIcon,
  ExpandMore as ExpandMoreIcon,
  ExpandLess as ExpandLessIcon,
  ArrowBack as ArrowBackIcon,
} from '@mui/icons-material';
import { jsPDF } from 'jspdf';
import autoTable from 'jspdf-autotable';

const drawerWidth = 240;

const AdminDashboard = () => {
  const navigate = useNavigate();
  const location = useLocation();
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));
  const [mobileOpen, setMobileOpen] = useState(false);
  const [students, setStudents] = useState([]);
  const [hallTickets, setHallTickets] = useState([]);
  const [currentPage, setCurrentPage] = useState(1);
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedDepartment, setSelectedDepartment] = useState('');
  const [snackbar, setSnackbar] = useState({ open: false, message: '', severity: 'success' });
  const itemsPerPage = 6;
  const [expandedStudents, setExpandedStudents] = useState(new Set());
  
  useEffect(() => {
    const adminData = JSON.parse(localStorage.getItem('currentAdmin'));
    if (!adminData) {
      navigate('/admin-login');
      return;
    }

    if (!location.state?.selectedDepartment) {
      navigate('/department-selection');
      return;
    }

    let storedStudents = JSON.parse(localStorage.getItem('students')) || [];
    let storedHallTickets = JSON.parse(localStorage.getItem('hallTickets')) || [];
    
    // Fill in empty student details
    storedStudents = storedStudents.map(student => {
      if (!student.email) {
        student.email = `${student.name.toLowerCase().replace(/\s+/g, '.')}@example.com`;
      }
      if (!student.phone) {
        student.phone = `+91 ${Math.floor(Math.random() * 9000000000) + 1000000000}`;
      }
      if (!student.address) {
        student.address = '123 College Street, Madurai, Tamil Nadu, India';
      }
      return student;
    });
    
    // Create hall tickets for students who don't have one
    const updatedHallTickets = [...storedHallTickets];
    const existingRollNumbers = storedHallTickets.map(ticket => ticket.studentRollNumber);
    
    storedStudents.forEach(student => {
      if (!existingRollNumbers.includes(student.rollNumber)) {
        const examName = `${student.department} Semester Exam`;
        const examDate = new Date();
        examDate.setDate(examDate.getDate() + 30); // Set exam date 30 days from now
        
        const subjects = [
          { name: 'Subject 1', date: examDate.toLocaleDateString(), time: '09:00 AM - 12:00 PM', venue: 'Hall A' },
          { name: 'Subject 2', date: new Date(examDate.getTime() + 86400000).toLocaleDateString(), time: '09:00 AM - 12:00 PM', venue: 'Hall B' },
          { name: 'Subject 3', date: new Date(examDate.getTime() + 172800000).toLocaleDateString(), time: '09:00 AM - 12:00 PM', venue: 'Hall C' }
        ];
        
        updatedHallTickets.push({
          id: `ticket-${student.rollNumber}`,
          studentRollNumber: student.rollNumber,
          examName,
          examDate: examDate.toLocaleDateString(),
          status: 'Available',
          subjects
        });
      }
    });
    
    // Save updated data
    localStorage.setItem('students', JSON.stringify(storedStudents));
    localStorage.setItem('hallTickets', JSON.stringify(updatedHallTickets));
    
    setStudents(storedStudents);
    setHallTickets(updatedHallTickets);
    setSelectedDepartment(location.state.selectedDepartment);
  }, [navigate, location]);

  const handleDrawerToggle = () => {
    setMobileOpen(!mobileOpen);
  };

  const handleLogout = () => {
    localStorage.removeItem('currentAdmin');
    navigate('/');
  };

  const handleBack = () => {
    navigate('/department-selection');
  };

  const showSnackbar = (message, severity) => {
    setSnackbar({ open: true, message, severity });
  };

  const handleCloseSnackbar = () => {
    setSnackbar({ ...snackbar, open: false });
  };

  const handleDownloadIndividual = (student) => {
    const doc = new jsPDF();
    
    doc.setPage(1);
    
    doc.setDrawColor(0, 0, 0);
    doc.setLineWidth(0.5);
    doc.rect(10, 10, 190, 277);
    
    doc.setFontSize(14);
    doc.setTextColor(0, 0, 0);
    doc.setFont(undefined, 'bold');
    doc.text('SOLAMALAI COLLEGE OF ENGINEERING', 105, 20, { align: 'center' });
    
    doc.setFontSize(10);
    doc.setFont(undefined, 'normal');
    doc.text('MADURAI - 625020', 105, 27, { align: 'center' });
    
    doc.setFontSize(12);
    doc.setFont(undefined, 'bold');
    doc.text('HALL TICKET', 105, 40, { align: 'center' });
    doc.setDrawColor(0, 0, 0);
    doc.line(80, 42, 130, 42);
    
    doc.setFontSize(10);
    doc.setFont(undefined, 'normal');
    doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 105, 50, { align: 'center' });
    
    doc.setFontSize(10);
    doc.setFont(undefined, 'bold');
    doc.text('STUDENT DETAILS', 20, 65);
    doc.setFont(undefined, 'normal');
    doc.setFontSize(9);
    doc.text(`Name: ${student.name}`, 20, 75);
    doc.text(`Roll Number: ${student.rollNumber}`, 20, 85);
    doc.text(`Department: ${student.department}`, 20, 95);
    
    const studentTicket = hallTickets.find(ticket => ticket.studentRollNumber === student.rollNumber);
    
    if (studentTicket) {
      doc.setFontSize(10);
      doc.setFont(undefined, 'bold');
      doc.text('EXAM DETAILS', 20, 115);
      
      doc.setDrawColor(0, 0, 0);
      doc.setLineWidth(0.2);
      doc.line(20, 120, 190, 120);
      doc.line(20, 120, 20, 130);
      doc.line(190, 120, 190, 130);
      doc.line(20, 130, 190, 130);
      
      doc.line(70, 120, 70, 130);
      doc.line(120, 120, 120, 130);
      
      doc.setFontSize(9);
      doc.setFont(undefined, 'bold');
      doc.text('Exam Name', 45, 125, { align: 'center' });
      doc.text('Date', 95, 125, { align: 'center' });
      doc.text('Status', 155, 125, { align: 'center' });
      
      doc.setFont(undefined, 'normal');
      doc.text(studentTicket.examName, 45, 128, { align: 'center' });
      doc.text(studentTicket.examDate, 95, 128, { align: 'center' });
      doc.text(studentTicket.status, 155, 128, { align: 'center' });
      
      doc.setFontSize(10);
      doc.setFont(undefined, 'bold');
      doc.text('SUBJECTS', 20, 140);
      
      doc.line(20, 145, 190, 145);
      doc.line(20, 145, 20, 155);
      doc.line(190, 145, 190, 155);
      doc.line(20, 155, 190, 155);
      
      doc.line(70, 145, 70, 155);
      doc.line(120, 145, 120, 155);
      doc.line(150, 145, 150, 155);
      
      doc.setFontSize(9);
      doc.setFont(undefined, 'bold');
      doc.text('Subject', 45, 150, { align: 'center' });
      doc.text('Date', 95, 150, { align: 'center' });
      doc.text('Time', 135, 150, { align: 'center' });
      doc.text('Venue', 170, 150, { align: 'center' });
      
      let yPos = 160;
      studentTicket.subjects.forEach((subject, index) => {
        if (yPos > 250) {
          doc.addPage();
          doc.setDrawColor(0, 0, 0);
          doc.setLineWidth(0.5);
          doc.rect(10, 10, 190, 277);
          yPos = 20;
        }
        
        doc.line(20, yPos, 190, yPos);
        doc.line(20, yPos, 20, yPos + 10);
        doc.line(190, yPos, 190, yPos + 10);
        doc.line(20, yPos + 10, 190, yPos + 10);
        
        doc.line(70, yPos, 70, yPos + 10);
        doc.line(120, yPos, 120, yPos + 10);
        doc.line(150, yPos, 150, yPos + 10);
        
        doc.setFont(undefined, 'normal');
        doc.text(subject.name, 45, yPos + 5, { align: 'center' });
        doc.text(subject.date, 95, yPos + 5, { align: 'center' });
        doc.text(subject.time, 135, yPos + 5, { align: 'center' });
        doc.text(subject.venue, 170, yPos + 5, { align: 'center' });
        
        yPos += 12;
      });
      
      doc.setFontSize(10);
      doc.setFont(undefined, 'bold');
      doc.text('IMPORTANT INSTRUCTIONS', 20, yPos + 15);
      
      const instructions = [
        '1. Bring this hall ticket to the examination hall',
        '2. Carry a valid ID proof',
        '3. Arrive 30 minutes before the exam',
        '4. Follow all examination rules and regulations',
        '5. No electronic devices allowed in the examination hall',
        '6. Maintain silence and discipline during the exam'
      ];
      
      doc.setFontSize(9);
      doc.setFont(undefined, 'normal');
      instructions.forEach((instruction, index) => {
        if (yPos + 30 + (index * 10) > 270) {
          doc.addPage();
          doc.setDrawColor(0, 0, 0);
          doc.setLineWidth(0.5);
          doc.rect(10, 10, 190, 277);
          yPos = 20;
        }
        doc.text(instruction, 20, yPos + 25 + (index * 10));
      });
    } else {
      doc.setFontSize(10);
      doc.setTextColor(255, 0, 0);
      doc.text('No Hall Ticket Available', 105, 120, { align: 'center' });
    }
    
    doc.setFontSize(8);
    doc.setTextColor(100, 100, 100);
    doc.text('This is a computer-generated document. No signature required.', 105, 280, { align: 'center' });
    
    const filename = `hall-ticket-${student.rollNumber}.pdf`;
    doc.save(filename);
  };

  const handleDownloadBulk = () => {
    const doc = new jsPDF();
    
    students.forEach((student, index) => {
      if (index > 0) {
        doc.addPage();
      }
      
      doc.setDrawColor(0, 0, 0);
      doc.setLineWidth(0.5);
      doc.rect(10, 10, 190, 277);
      
      const studentTicket = hallTickets.find(ticket => ticket.studentRollNumber === student.rollNumber);
      
      doc.setFontSize(14);
      doc.setTextColor(0, 0, 0);
      doc.setFont(undefined, 'bold');
      doc.text('SOLAMALAI COLLEGE OF ENGINEERING', 105, 20, { align: 'center' });
      
      doc.setFontSize(10);
      doc.setFont(undefined, 'normal');
      doc.text('MADURAI - 625020', 105, 27, { align: 'center' });
      
      doc.setFontSize(12);
      doc.setFont(undefined, 'bold');
      doc.text('HALL TICKET', 105, 40, { align: 'center' });
      doc.setDrawColor(0, 0, 0);
      doc.line(80, 42, 130, 42);
      
      doc.setFontSize(10);
      doc.setFont(undefined, 'normal');
      doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 105, 50, { align: 'center' });
      
      doc.setFontSize(10);
      doc.setFont(undefined, 'bold');
      doc.text('STUDENT DETAILS', 20, 65);
      doc.setFont(undefined, 'normal');
      doc.setFontSize(9);
      doc.text(`Name: ${student.name}`, 20, 75);
      doc.text(`Roll Number: ${student.rollNumber}`, 20, 85);
      doc.text(`Department: ${student.department}`, 20, 95);
      
      if (studentTicket) {
        doc.setFontSize(10);
        doc.setFont(undefined, 'bold');
        doc.text('EXAM DETAILS', 20, 115);
        
        doc.setDrawColor(0, 0, 0);
        doc.setLineWidth(0.2);
        doc.line(20, 120, 190, 120);
        doc.line(20, 120, 20, 130);
        doc.line(190, 120, 190, 130);
        doc.line(20, 130, 190, 130);
        
        doc.line(70, 120, 70, 130);
        doc.line(120, 120, 120, 130);
        
        doc.setFontSize(9);
        doc.setFont(undefined, 'bold');
        doc.text('Exam Name', 45, 125, { align: 'center' });
        doc.text('Date', 95, 125, { align: 'center' });
        doc.text('Status', 155, 125, { align: 'center' });
        
        doc.setFont(undefined, 'normal');
        doc.text(studentTicket.examName, 45, 128, { align: 'center' });
        doc.text(studentTicket.examDate, 95, 128, { align: 'center' });
        doc.text(studentTicket.status, 155, 128, { align: 'center' });
        
        doc.setFontSize(10);
        doc.setFont(undefined, 'bold');
        doc.text('SUBJECTS', 20, 140);
        
        doc.line(20, 145, 190, 145);
        doc.line(20, 145, 20, 155);
        doc.line(190, 145, 190, 155);
        doc.line(20, 155, 190, 155);
        
        doc.line(70, 145, 70, 155);
        doc.line(120, 145, 120, 155);
        doc.line(150, 145, 150, 155);
        
        doc.setFontSize(9);
        doc.setFont(undefined, 'bold');
        doc.text('Subject', 45, 150, { align: 'center' });
        doc.text('Date', 95, 150, { align: 'center' });
        doc.text('Time', 135, 150, { align: 'center' });
        doc.text('Venue', 170, 150, { align: 'center' });
        
        let yPos = 160;
        studentTicket.subjects.forEach((subject, subIndex) => {
          if (yPos > 250) {
            doc.addPage();
            doc.setDrawColor(0, 0, 0);
            doc.setLineWidth(0.5);
            doc.rect(10, 10, 190, 277);
            yPos = 20;
          }
          
          doc.line(20, yPos, 190, yPos);
          doc.line(20, yPos, 20, yPos + 10);
          doc.line(190, yPos, 190, yPos + 10);
          doc.line(20, yPos + 10, 190, yPos + 10);
          
          doc.line(70, yPos, 70, yPos + 10);
          doc.line(120, yPos, 120, yPos + 10);
          doc.line(150, yPos, 150, yPos + 10);
          
          doc.setFont(undefined, 'normal');
          doc.text(subject.name, 45, yPos + 5, { align: 'center' });
          doc.text(subject.date, 95, yPos + 5, { align: 'center' });
          doc.text(subject.time, 135, yPos + 5, { align: 'center' });
          doc.text(subject.venue, 170, yPos + 5, { align: 'center' });
          
          yPos += 12;
        });
        
        doc.setFontSize(10);
        doc.setFont(undefined, 'bold');
        doc.text('IMPORTANT INSTRUCTIONS', 20, yPos + 15);
        
        const instructions = [
          '1. Bring this hall ticket to the examination hall',
          '2. Carry a valid ID proof',
          '3. Arrive 30 minutes before the exam',
          '4. Follow all examination rules and regulations',
          '5. No electronic devices allowed in the examination hall',
          '6. Maintain silence and discipline during the exam'
        ];
        
        doc.setFontSize(9);
        doc.setFont(undefined, 'normal');
        instructions.forEach((instruction, instIndex) => {
          if (yPos + 30 + (instIndex * 10) > 270) {
            doc.addPage();
            doc.setDrawColor(0, 0, 0);
            doc.setLineWidth(0.5);
            doc.rect(10, 10, 190, 277);
            yPos = 20;
          }
          doc.text(instruction, 20, yPos + 25 + (instIndex * 10));
        });
      } else {
        doc.setFontSize(10);
        doc.setTextColor(255, 0, 0);
        doc.text('No Hall Ticket Available', 105, 120, { align: 'center' });
      }
      
      doc.setFontSize(8);
      doc.setTextColor(100, 100, 100);
      doc.text('This is a computer-generated document. No signature required.', 105, 280, { align: 'center' });
      
      doc.setFontSize(8);
      doc.text(`Page ${index + 1} of ${students.length}`, 105, 290, { align: 'center' });
    });
    
    const filename = `all-hall-tickets-${new Date().toISOString().split('T')[0]}.pdf`;
    doc.save(filename);
  };

  const handleExpandClick = (studentId) => {
    setExpandedStudents(prev => {
      const newSet = new Set(prev);
      if (newSet.has(studentId)) {
        newSet.delete(studentId);
      } else {
        newSet.add(studentId);
      }
      return newSet;
    });
  };

  const filteredStudents = students.filter(student => {
    const matchesSearch = !searchTerm || 
      student.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      student.rollNumber.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesDepartment = !selectedDepartment || student.department === selectedDepartment;
    return matchesSearch && matchesDepartment;
  });

  const paginatedStudents = filteredStudents.slice(
    (currentPage - 1) * itemsPerPage,
    currentPage * itemsPerPage
  );

  const drawer = (
    <div>
      <Box sx={{ 
        p: 3, 
        display: 'flex', 
        alignItems: 'center', 
        justifyContent: 'center',
        background: '#1976D2',
        color: 'white',
        borderBottom: '1px solid rgba(255, 255, 255, 0.1)'
      }}>
        <Typography variant="h6" noWrap component="div" sx={{ 
          fontWeight: 'bold',
          color: 'white',
          fontSize: '1.2rem'
        }}>
          Admin Panel
        </Typography>
      </Box>
      <Divider />
      <List sx={{ backgroundColor: '#1565C0', color: 'white' }}>
        <ListItem 
          button 
          selected={true}
          onClick={() => {
            if (isMobile) handleDrawerToggle();
          }}
          sx={{
            backgroundColor: '#2196F3',
            color: 'white',
            '&:hover': {
              backgroundColor: '#42A5F5',
            },
            '&.Mui-selected': {
              backgroundColor: '#2196F3',
              '&:hover': {
                backgroundColor: '#42A5F5',
              },
            },
            mb: 1,
            borderRadius: '8px',
            mx: 2,
            boxShadow: '0 2px 4px rgba(0,0,0,0.2)',
            borderLeft: '4px solid #FFFFFF',
          }}
        >
          <ListItemIcon sx={{ color: 'white' }}>
            <SchoolIcon />
          </ListItemIcon>
          <ListItemText 
            primary="Hall Tickets" 
            primaryTypographyProps={{
              style: { 
                color: 'white', 
                fontWeight: 'bold',
                fontSize: '1rem'
              }
            }}
          />
        </ListItem>
      </List>
    </div>
  );

  return (
    <Box sx={{ display: 'flex', minHeight: '100vh', backgroundColor: '#f5f5f5' }}>
      <AppBar position="fixed" sx={{ zIndex: theme.zIndex.drawer + 1 }}>
        <Toolbar>
          <IconButton
            color="inherit"
            edge="start"
            onClick={handleBack}
            sx={{ mr: 2 }}
          >
            <ArrowBackIcon />
          </IconButton>
          <Typography variant="h6" noWrap component="div" sx={{ flexGrow: 1 }}>
            Admin Dashboard
          </Typography>
          <IconButton color="inherit" onClick={handleLogout}>
            <LogoutIcon />
          </IconButton>
        </Toolbar>
      </AppBar>
      <Box
        component="nav"
        sx={{ width: { sm: drawerWidth }, flexShrink: { sm: 0 } }}
      >
        <Drawer
          variant={isMobile ? "temporary" : "permanent"}
          open={isMobile ? mobileOpen : true}
          onClose={handleDrawerToggle}
          ModalProps={{
            keepMounted: true,
          }}
          sx={{
            '& .MuiDrawer-paper': { 
              boxSizing: 'border-box', 
              width: drawerWidth,
              backgroundColor: '#1565C0',
              mt: 8,
              boxShadow: 2,
              borderRight: 'none',
            },
          }}
        >
          {drawer}
        </Drawer>
      </Box>
      <Box
        component="main"
        sx={{
          flexGrow: 1,
          p: 3,
          width: { sm: `calc(100% - ${drawerWidth}px)` },
          mt: 8,
        }}
      >
        <Box sx={{ 
          display: 'flex', 
          justifyContent: 'space-between', 
          alignItems: 'center', 
          mb: 4,
          backgroundColor: 'white',
          p: 3,
          borderRadius: 2,
          boxShadow: '0 2px 4px rgba(0,0,0,0.1)',
        }}>
          <Box sx={{ display: 'flex', alignItems: 'center', gap: 2 }}>
            <IconButton
              onClick={() => navigate('/department-selection')}
              sx={{ mr: 1 }}
            >
              <ArrowBackIcon />
            </IconButton>
            <Typography variant="h5" sx={{ 
              fontWeight: 'bold', 
              color: theme.palette.primary.main,
              background: 'linear-gradient(45deg, #1976D2 30%, #2196F3 90%)',
              WebkitBackgroundClip: 'text',
              WebkitTextFillColor: 'transparent',
            }}>
              Hall Tickets Management
            </Typography>
          </Box>
          <Box sx={{ display: 'flex', gap: 2, alignItems: 'center' }}>
            <Paper
              component="form"
              sx={{ 
                p: '2px 4px', 
                display: 'flex', 
                alignItems: 'center', 
                width: 300,
                borderRadius: 2,
                boxShadow: '0 2px 4px rgba(0,0,0,0.1)',
              }}
            >
              <InputAdornment position="start">
                <SearchIcon sx={{ color: theme.palette.primary.main }} />
              </InputAdornment>
              <TextField
                fullWidth
                placeholder="Search students..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                variant="standard"
                sx={{ ml: 1, flex: 1 }}
                InputProps={{ disableUnderline: true }}
              />
            </Paper>
            <Button
              variant="contained"
              color="primary"
              startIcon={<DownloadIcon />}
              onClick={handleDownloadBulk}
              sx={{ 
                borderRadius: 2,
                textTransform: 'none',
                px: 3,
                boxShadow: '0 2px 4px rgba(0,0,0,0.1)',
              }}
            >
              Download All
            </Button>
          </Box>
        </Box>

        <Grid container spacing={3}>
          {paginatedStudents.length > 0 ? (
            paginatedStudents.map((student) => {
              const studentTicket = hallTickets.find(ticket => ticket.studentRollNumber === student.rollNumber);
              const isExpanded = expandedStudents.has(student.id);
              
              return (
                <Grid item xs={12} key={student.id}>
                  <Card 
                    sx={{ 
                      height: '100%',
                      display: 'flex',
                      flexDirection: 'column',
                      transition: 'transform 0.2s, box-shadow 0.2s',
                      '&:hover': {
                        transform: 'translateY(-4px)',
                        boxShadow: '0 4px 8px rgba(0,0,0,0.2)',
                      },
                      borderRadius: 2,
                      overflow: 'hidden',
                    }}
                  >
                    <CardContent sx={{ flexGrow: 1 }}>
                      <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
                        <Avatar 
                          sx={{ 
                            bgcolor: theme.palette.primary.main,
                            mr: 2,
                            width: 56,
                            height: 56,
                            fontSize: '1.5rem',
                          }}
                        >
                          {student.name.charAt(0)}
                        </Avatar>
                        <Box>
                          <Typography variant="h6" component="div" sx={{ fontWeight: 'bold' }}>
                            {student.name}
                          </Typography>
                          <Typography variant="body2" color="text.secondary">
                            {student.rollNumber}
                          </Typography>
                        </Box>
                      </Box>
                      
                      <Stack spacing={1} sx={{ mb: 2 }}>
                        <Box sx={{ display: 'flex', alignItems: 'center' }}>
                          <ClassIcon sx={{ mr: 1, color: theme.palette.primary.main }} />
                          <Typography variant="body2">{student.department}</Typography>
                        </Box>
                        <Box sx={{ display: 'flex', alignItems: 'center' }}>
                          <EmailIcon sx={{ mr: 1, color: theme.palette.primary.main }} />
                          <Typography variant="body2">{student.email}</Typography>
                        </Box>
                      </Stack>

                      <Typography variant="subtitle2" sx={{ mb: 1, fontWeight: 'bold' }}>
                        Hall Ticket:
                      </Typography>
                      <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1 }}>
                        {studentTicket ? (
                          <>
                            <Chip 
                              label={studentTicket.examName}
                              size="small"
                              color="primary"
                              variant="outlined"
                              icon={<AssignmentIcon />}
                              sx={{ borderRadius: 1 }}
                            />
                            <Chip 
                              label={studentTicket.status}
                              size="small"
                              color={studentTicket.status === 'Available' ? 'success' : 'warning'}
                              variant="outlined"
                              sx={{ borderRadius: 1 }}
                            />
                          </>
                        ) : (
                          <Typography variant="body2" color="text.secondary">
                            No hall ticket available
                          </Typography>
                        )}
                      </Box>

                      {studentTicket && (
                        <Collapse in={isExpanded} timeout="auto" unmountOnExit>
                          <Box sx={{ mt: 2 }}>
                            <Typography variant="subtitle2" sx={{ mb: 1, fontWeight: 'bold' }}>
                              Exam Details:
                            </Typography>
                            <TableContainer 
                              component={Paper} 
                              variant="outlined"
                              sx={{ borderRadius: 2 }}
                            >
                              <Table size="small">
                                <TableHead>
                                  <TableRow>
                                    <TableCell>Subject</TableCell>
                                    <TableCell>Date</TableCell>
                                    <TableCell>Time</TableCell>
                                    <TableCell>Venue</TableCell>
                                  </TableRow>
                                </TableHead>
                                <TableBody>
                                  {studentTicket.subjects.map((subject, index) => (
                                    <TableRow key={index}>
                                      <TableCell>{subject.name}</TableCell>
                                      <TableCell>{subject.date}</TableCell>
                                      <TableCell>{subject.time}</TableCell>
                                      <TableCell>{subject.venue}</TableCell>
                                    </TableRow>
                                  ))}
                                </TableBody>
                              </Table>
                            </TableContainer>
                          </Box>
                        </Collapse>
                      )}
                    </CardContent>
                    <CardActions sx={{ justifyContent: 'space-between', p: 2 }}>
                      {studentTicket && (
                        <Button
                          size="small"
                          onClick={() => handleExpandClick(student.id)}
                          endIcon={isExpanded ? <ExpandLessIcon /> : <ExpandMoreIcon />}
                          sx={{ 
                            color: theme.palette.primary.main,
                            '&:hover': {
                              backgroundColor: theme.palette.primary.light,
                              color: 'white',
                            },
                          }}
                        >
                          {isExpanded ? 'Show Less' : 'View More'}
                        </Button>
                      )}
                      <Tooltip title="Download Hall Ticket">
                        <IconButton 
                          color="primary"
                          onClick={() => handleDownloadIndividual(student)}
                          sx={{
                            '&:hover': {
                              backgroundColor: theme.palette.primary.light,
                              color: 'white',
                            },
                          }}
                        >
                          <DownloadIcon />
                        </IconButton>
                      </Tooltip>
                    </CardActions>
                  </Card>
                </Grid>
              );
            })
          ) : (
            <Grid item xs={12}>
              <Paper 
                sx={{ 
                  p: 4, 
                  display: 'flex', 
                  flexDirection: 'column', 
                  alignItems: 'center',
                  justifyContent: 'center',
                  borderRadius: 2,
                  boxShadow: '0 2px 4px rgba(0,0,0,0.1)',
                  backgroundColor: '#f9f9f9',
                  minHeight: '200px'
                }}
              >
                <Typography variant="h6" color="text.secondary" gutterBottom>
                  No records found
                </Typography>
                <Typography variant="body2" color="text.secondary" align="center">
                  There are no students in the {selectedDepartment} department.
                </Typography>
                <Button 
                  variant="outlined" 
                  color="primary" 
                  startIcon={<ArrowBackIcon />}
                  onClick={handleBack}
                  sx={{ mt: 2 }}
                >
                  Go Back
                </Button>
              </Paper>
            </Grid>
          )}
        </Grid>

        <Box sx={{ display: 'flex', justifyContent: 'center', mt: 4 }}>
          <Pagination
            count={Math.ceil(filteredStudents.length / itemsPerPage)}
            page={currentPage}
            onChange={(event, value) => setCurrentPage(value)}
            color="primary"
            sx={{
              '& .MuiPaginationItem-root': {
                borderRadius: 2,
              },
            }}
          />
        </Box>

        <Snackbar
          open={snackbar.open}
          autoHideDuration={6000}
          onClose={handleCloseSnackbar}
          anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}
        >
          <Alert 
            onClose={handleCloseSnackbar} 
            severity={snackbar.severity}
            sx={{ width: '100%', borderRadius: 2 }}
          >
            {snackbar.message}
          </Alert>
        </Snackbar>
      </Box>
    </Box>
  );
};

// Fix for linter error
const AdminDashboardComponent = AdminDashboard;
export default AdminDashboardComponent;